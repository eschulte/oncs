# -*- mode:org -*-
#+Title: Oncs -- A distributed lisp virtual machine
#+Author: Eric Schulte
#+License: GPLV3
#+Options: ^:nil toc:nil num:nil
#+Style: <style type="text/css">pre{display:table-cell;background:#232323; color:#e6e1dc;}</style>
#+Style: <style type="text/css">#content{max-width:1000px;margin:auto;} body{ font-size:small; } table{ font-size:small; }</style>
#+Style: <style type="text/css">.outline-text-2{margin-left:2em;}.outline-text-3{margin-left:3em;}</style>

There is a large grid /world/ of ONC structures linked by local
relative pointers.  These structures perform calculations through
\lambda-application.  All of the action consists of passing messages between
ONCS.  Messages are used to maintain reference counts and duplicate
and replace linked ONC structures, all in the service of
\lambda-application.  Once this is working I'll add primitive integer
operations, then look to porting to GPU and IXM.

See file:oncs.h for an overview of the functions and objects being
used.  See file:oncs.lisp for a simulation of the world in lisp.

- ONC :: are linked structures composed of
     #+begin_src C
       typedef struct { ptr car, cdr, msg; int refs; } onc;
     #+end_src
     which perform the following actions
  - replace self with the value at a pointer uniquifying variables
  - propagate an application message through self
  - find free space for setting car/cdr to a pointer
  - reference count maintenance, an onc with ref \equiv 0 is considered
    free space

- Pointer :: header indicating type of contents, then car and cdr
     | header | interpretation                       |
     |--------+--------------------------------------|
     |      0 | nil                                  |
     |      1 | local pointer (car,cdr)              |
     |      2 | integer car+cdr                      |
     |      3 | symbol car (cdr for disambiguation?) |
     |      4 | \lambda same as symbol                     |

- Messages :: passed between oncs, indicate next action for an onc to
     take, broken out by header type below
  - =NIL= runs the holding loop
  - =LOCAL= /open/
  - =INTEGER= increments or decrements the ref counter by the given
    value
  - =SYMBOL= /open/
  - =LAMBDA= performs lambda application using one ptr to specify the
    variable to be replaced and the second the specify the replacement
    value
