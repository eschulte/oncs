# -*- mode:org -*-
#+Title: Oncs -- A distributed lisp virtual machine
#+Author: Eric Schulte
#+License: GPLV3
#+Options: ^:nil toc:nil num:nil
#+Style: <style type="text/css">pre{display:table-cell;background:#232323; color:#e6e1dc;}</style>
#+Style: <style type="text/css">#content{max-width:1000px;margin:auto;} body{ font-size:small; } table{ font-size:small; }</style>
#+Style: <style type="text/css">.outline-text-2{margin-left:2em;}.outline-text-3{margin-left:3em;}</style>

* Overview
There is a large grid /world/ of ONC structures linked by local
relative pointers.  These structures perform calculations through
\lambda-application.  All of the action consists of passing messages between
ONCS.  Messages are used to maintain reference counts and duplicate
and replace linked ONC structures, all in the service of
\lambda-application.  Once this is working I'll add primitive integer
operations, then look to porting to GPU and IXM.

See file:oncs.h for an overview of the functions and objects being
used.  See file:oncs.lisp for a simulation of the world in lisp.

- ONC :: are linked structures composed of
     #+begin_src C
       typedef struct { ptr car, cdr, msg; int refs; } onc;
     #+end_src
     which perform the following actions
  - replace self with the value at a pointer uniquifying variables
  - propagate an application message through self
  - find free space for setting car/cdr to a pointer
  - reference count maintenance, an onc with ref \equiv 0 is considered
    free space

- Pointer :: header indicating type of contents, then car and cdr
     | header | interpretation                       |
     |--------+--------------------------------------|
     |      0 | nil                                  |
     |      1 | local pointer (car,cdr)              |
     |      2 | integer car+cdr                      |
     |      3 | symbol car (cdr for disambiguation?) |
     |      4 | \lambda same as symbol                     |

- Messages :: passed between oncs, indicate next action for an onc to
     take, broken out by header type below
  - =NIL= runs the holding loop
  - =LOCAL= /open/
  - =INTEGER= increments or decrements the ref counter by the given
    value
  - =SYMBOL= /open/
  - =LAMBDA= performs lambda application using one ptr to specify the
    variable to be replaced and the second the specify the replacement
    value

* COMMENT Notes
** other message types
- refresh (or some such) to indicate to a higher level portion of your
  structure that you have changed
- ready to be applied (for when I become a lambda and want to let the
  next level up know) -- although this would require up-pointers

** is it worth holding pointers to higher level
similar to the =env= pointer in earlier instantiating

** reverse-- lambdas matching lambdas with their applications
while
: (\lambda ..tons of stuff..)(argument)
seems like it would require lots of message passing to apply, the same
isn't true for
: (...tons of stuff...\lambda)(argument)

the key is just to start the application from the next level up

* COMMENT Publishing
This code is used to publish this page to the =cs.unm.edu= webserver.
#+begin_src emacs-lisp :results silent
  (setq oncs-dir (file-name-directory (or load-file-name buffer-file-name)))
  (unless (boundp 'org-publish-project-alist)
    (setq org-publish-project-alist nil))
  ;; the main html page
  (add-to-list 'org-publish-project-alist
               `("oncs-html"
                  :base-directory ,oncs-dir
                  :include ("README")
                  :publishing-directory "/ssh:eschulte@kenworth.cs.unm.edu:~/public_html/code/oncs/"
                  :publishing-function org-publish-org-to-html
                  :style "<style type=\"text/css\">\n <!--/*--><![CDATA[/*><!--*/
    .title  { text-align: center; }
    p.verse { margin-left: 3% }
    p { text-align: justify }
    table { border-collapse: collapse; }
    td, th { vertical-align: top; }
    dt { font-weight: bold; }
    div.figure { padding: 0.5em; }
    div.figure p { text-align: center; }
    .linenr { font-size:smaller }
    #postamble { color: gray; padding-top: 2em; font-size: 0.75em; }
    /*]]>*/-->
  </style>"))
  ;; the contents of the base directory
  (add-to-list 'org-publish-project-alist
               `("oncs-data"
                 :base-directory ,oncs-dir
                 :include ("COPYING")
                 :base-extension "h\\|c\\|txt\\|lisp"
                 :publishing-directory "/ssh:eschulte@kenworth.cs.unm.edu:~/public_html/code/oncs/"
                 :publishing-function org-publish-attachment))
  ;; a single combined project to publish both html and supporting materials
  (add-to-list 'org-publish-project-alist
               '("oncs" :components
                 ("oncs-html"
                  "oncs-data")))
#+end_src
